#pragma checksum "C:\Users\User\Desktop\Programe cod sursa\Don-ListaLaminarePlc\ItroducereDateCuptor\Views\Home\About.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4401789002884c5a66ee0bb22c4d721e0afdc846"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_About), @"mvc.1.0.view", @"/Views/Home/About.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/About.cshtml", typeof(AspNetCore.Views_Home_About))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\User\Desktop\Programe cod sursa\Don-ListaLaminarePlc\ItroducereDateCuptor\Views\_ViewImports.cshtml"
using ItroducereDateCuptor;

#line default
#line hidden
#line 2 "C:\Users\User\Desktop\Programe cod sursa\Don-ListaLaminarePlc\ItroducereDateCuptor\Views\_ViewImports.cshtml"
using ItroducereDateCuptor.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4401789002884c5a66ee0bb22c4d721e0afdc846", @"/Views/Home/About.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"436efc314568fed976042604cee31208c141ab58", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_About : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\User\Desktop\Programe cod sursa\Don-ListaLaminarePlc\ItroducereDateCuptor\Views\Home\About.cshtml"
  
    ViewData["Title"] = "Descriere";

#line default
#line hidden
            BeginContext(45, 4, true);
            WriteLiteral("<h2>");
            EndContext();
            BeginContext(50, 17, false);
#line 4 "C:\Users\User\Desktop\Programe cod sursa\Don-ListaLaminarePlc\ItroducereDateCuptor\Views\Home\About.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
            EndContext();
            BeginContext(67, 2284, true);
            WriteLiteral(@"</h2>
<h3>Instructiuni pentru operator cuptor</h3>

<p>Pe pagina de start este afisata lista de productie. <br />Operatorul de la cuptor are obligatia, 
    dupa ce da afara din cuptor o bucata, sa apese butonul ""Laminare"".<br /> Daca apar probleme neprevazute si 
    este nevoit sa dea o bucata retur, va apasa butonul ""Retur"". <br /><strong>Nota:</strong> <br />Operatorul 
    face aceasta operatie doar dupa ce da afara din cuptor, de asemenea nu mai face nicio alta actiune pentru barele dupa linie care sunt
    rebut sau retur.
</p>
<p>
    Dupa apasarea butonului ""Laminare"" / ""Retur"", va fi indicata pe ecran cu culoare verde bucata pe care a dat-o afara,
    cat si data la care a fost data afara, plus incrementarea counterului ""Bare date afara""(Acesta monitorizeaza numarul bucatilor date afara). 
    De asemenea pe ecran apar in lista in ordine blumurile care urmeaza sa fie date afara.<br />
    La intrarea in schimb trebuie sa apasati butonul ""Reset Counter"" pentru a seta counterul de bare da");
            WriteLiteral(@"te afara la 0.<br />
    Pentru orice probleme(daca lista nu corespunde, daca ati apsat din greseala de 2 ori laminare) sau neclaritati,
    contactati pe Vlad Moisei sau Bogdan Mitran.
</p>

<h3>Intructiuni adaugare fisier excel cu lista productie</h3>
<p>
    In pagina ""Incarca fisier"" se apasa butonul Browse si selecteaza un fisier excel cu extensia .xlsx (nu merge formatul vechi cu extensia .xls).
    Apoi se apasa butonul Upload.
    <br />
    Fisierul va avea formatul datelor de exp.: <br />
    id[int]	diam[int]	sarja(string[8])	furnizor(string[2])	calitate(string[10]) <br />
    1	110	1bed1	r1	calitate1<br />
    2	120	2bed2	r2	calitate2<br />
    <strong>Nota: </strong><br />
    Deoarece datele se stocheaza in server SQL, id-ul trebuie sa fie diferit. <br />    
    La introducerea datelor, trebuie verificat id-ul ultimei bucati din lista, si de acolo trebuie continuat in fisier.
</p>

<h3>Instructiuni extragere date in fisier excel</h3>
<p>
    In pagina Lista Blumuri aveti li");
            WriteLiteral("sta completa de blumuri care s-au produs cu detalii.\r\n    <br />\r\n    Aici aveti posibilitatea sa exportati lista in excel prin apasarea butonului Exporta in Excel. \r\n    <br />\r\n    De asemenea se poate edita lista cat si sterge.\r\n</p>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
